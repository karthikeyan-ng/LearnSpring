								Spring Expression Language (SpEL)
								---------------------------------

Evaluation
----------

	How to use simple use of SpEL interfaces and its expression language?
	---------------------------------------------------------------------
		Refer: MainForSimpleStringExpression.java
		
	SpEL package and classes
	------------------------
	The SpEL classes and interfaces you are most likely to use are located in the packages org.springframework.expression 
	and its sub packages such as spel.support.

	Features
	--------
	SpEL supports a wide range of features, such as calling methods, accessing properties, and calling constructors.

	Examples:
	---------
		com.techstack.spring.el.string.* (upto 6)
	
==========================================================================================
	
EvaluationContext
-----------------

The interface EvaluationContext is used when evaluating an expression to resolve properties, methods, or fields and to help perform type conversion.

	Evaluation context two out-of-the-box implementations:
		1. SimpleEvaluationContext — exposes a subset of essential SpEL language features and configuration options, for categories 
		of expressions that do not require the full extent of the SpEL language syntax and should be meaningfully restricted. Examples include 
		but are not limited to data binding expressions, property-based filters, and others.
		
		2. StandardEvaluationContext — exposes the full set of SpEL language features and configuration options. You may use it to specify a 
		default root object and to configure every available evaluation-related strategy.
		
SimpleEvaluationContext is designed to support only a subset of the SpEL language syntax. 
	- It excludes Java type references, constructors, and bean references. 
	- It also requires that one explicitly choose the level of support for properties and methods in expressions. 
	- By default, the create() static factory method enables only read access to properties. You can also obtain a builder to configure the exact 
	level of support needed, targeting one or some combination of the following:
	
		1. Custom PropertyAccessor only (no reflection)

		2. Data binding properties for read-only access

		3. Data binding properties for read and write
		
	Type conversion
	---------------
		- By default SpEL uses the conversion service available in Spring core (org.springframework.core.convert.ConversionService). 
		- This conversion service comes with many converters built in for common conversions but is also fully extensible so custom conversions 
		between types can be added.
		- Additionally it has the key capability that it is generics aware. 
			- when working with generic types in expressions, SpEL will attempt conversions to maintain type correctness for any objects it encounters.
	
		Implementation as given in "MainForSimpleStringExpression7.java"
		
==========================================================================================
		
Parser configuration
--------------------

It is possible to configure the SpEL expression parser using a parser configuration object (org.springframework.expression.spel.SpelParserConfiguration).

The configuration object controls the behavior of some of the expression components.

For example, 
		- if indexing into an array or collection and the element at the specified index is null it is possible to automatically create the element.
		- This is useful when using expressions made up of a chain of property references. 
		
		- If indexing into an array or list and specifying an index that is beyond the end of the current size of the array or list 
		it is possible to automatically grow the array or list to accommodate that index.
		
		Implementation as given in "MainForSimpleStringExpression8.java"

==========================================================================================

SpEL compilation
----------------
	How to compile an expression?
		- Spring Framework 4.1 includes a basic expression compiler. 
		- Expressions are usually interpreted which provides a lot of dynamic flexibility during evaluation but does not provide optimum performance.
			- For occasional expression usage this is fine
			- but when used by other components like Spring Integration, performance can be very important and there is no real need for the dynamism.
			
- The SpEL compiler is intended to address this need.
- The compiler will generate a real Java class on the fly during evaluation that embodies the expression behavior and use that to achieve much 
faster expression evaluation.
- Due to the lack of typing around expressions the compiler uses information gathered during the interpreted evaluations of an expression when 
performing compilation.

- For example, SpEL compiler does not know the type of a property reference purely from the expression, but during the first interpreted evaluation 
it will find out what it is.

- Of course, basing the compilation on this information could cause trouble later if the types of the various expression elements change over time.

- For this reason compilation is best suited to expressions whose type information is not going to change on repeated evaluations.

	For a basic expression like this:
		
		someArray[0].someProperty.someOtherProperty < 0.1
	
	- which involves array access, some property derefencing and numeric operations, the performance gain can be very noticeable.
	- In an example micro benchmark run of 50000 iterations, it was taking 75ms to evaluate using only the interpreter and just 3ms using 
	the compiled version of the expression. 
	
	How to configure compiler?
		- The compiler is not turned on by default, but there are two ways to turn it on.
			- It can be turned on using the parser configuration process discussed earlier or
			- via a system property when SpEL usage is embedded inside another component.
	
		It is important to understand that there are a few modes the compiler can operate in, captured in an enum 
		(org.springframework.expression.spel.SpelCompilerMode). The modes are as follows:
		
			(*) OFF - The compiler is switched off; this is the default.
			
			(*) IMMEDIATE - In immediate mode the expressions are compiled as soon as possible. This is typically after the first 
			interpreted evaluation. If the compiled expression fails (typically due to a type changing, as described above) then the caller 
			of the expression evaluation will receive an exception.
			
			(*) MIXED - In mixed mode the expressions silently switch between interpreted and compiled mode over time. After some number of 
			interpreted runs they will switch to compiled form and if something goes wrong with the compiled form (like a type changing, as 
			described above) then the expression will automatically switch back to interpreted form again. Sometime later it may generate another 
			compiled form and switch to it. Basically the exception that the user gets in IMMEDIATE mode is instead handled internally.
			
		 Implementation as given in "MainForSimpleStringExpression9.java"
		 
	Compiler limitations
	--------------------
	- Since Spring Framework 4.1 the basic compilation framework is in place.
	- However, the framework does not yet support compiling every kind of expression.
	- The initial focus has been on the common expressions that are likely to be used in performance critical contexts.
	- Speing EL doesn't support the following type of expressions...
		- expressions involving assignment
		- expressions relying on the conversion service
		- expressions using custom resolvers or accessors
		- expressions using selection or projection
		
	

		
