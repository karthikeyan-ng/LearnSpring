Dependencies
------------
A typical enterprise application does not consist of a single object (or bean in the Spring parlance). 
Even the simplest application has a few objects that work together to present what the end-user sees as a 
coherent application. This next section explains how you go from defining a number of bean definitions that 
stand alone to a fully realized application where objects collaborate to achieve a goal.

Dependency Injection
--------------------
- Dependency injection (DI) is a process whereby objects define their dependencies,
	- the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. 

- The container then injects those dependencies when it creates the bean. 
	- This process is fundamentally the inverse, hence the name Inversion of Control (IoC), of the bean itself 
	controlling the instantiation or location of its dependencies on its own by using direct construction of classes, 
	or the Service Locator pattern.
	
- DI exists in two major variants
	- Constructor-based dependency injection and
	- Setter-based dependency injection
	
==================================================================================
	
Constructor-based dependency injection
--------------------------------------
- Constructor-based DI is accomplished by the container invoking a constructor with a number of arguments, 
each representing a dependency.

- Calling a static factory method with specific arguments to construct the bean is nearly equivalent, and this discussion 
treats arguments to a constructor and to a static factory method similarly. The following example shows a class that can 
only be dependency-injected with constructor injection.

Constructor argument resolution
-------------------------------
Constructor argument resolution matching occurs using the argument’s type. If no potential ambiguity exists 
in the constructor arguments of a bean definition, then the order in which the constructor arguments are defined in a 
bean definition is the order in which those arguments are supplied to the appropriate constructor when the bean is 
being instantiated.

- using factory method

==================================================================================

Setter-based dependency injection
---------------------------------
- Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument 
constructor or no-argument static factory method to instantiate your bean.

- The ApplicationContext supports constructor-based and setter-based DI for the beans it manages.

- It also supports setter-based DI after some dependencies have already been injected through the constructor approach.

- use of the @Required annotation on a setter method can be used to make the property a required dependency.
Add below line in your configuration xml.
	
		<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
	
			OR
			
	- @Required Annotation with context:annotation-config Tag using XML
		context:annotation-config enables annotations for example @Required and @Autowired etc which are used at 
	class property label. A default RequiredAnnotationBeanPostProcessor is registered with context:annotation-config tag. 
	In case we are using context:annotation-config tag in our application context XML, we need not to create bean for 
	RequiredAnnotationBeanPostProcessor.
		
			<context:annotation-config/>
	
			OR
			
	- @Required Annotation with context:component-scan Tag using XML
		- In spring application context XML, context:component-scan is a tag using which we will be able to scan 
		the java classes annotated with @Component, @Repository, @Service, and @Controller stereotypes and 
		will be behaved as spring bean. We need to define package name to scan using the attribute base-package. 
		To enable annotations such as @Required and @Autowired etc which are used at class property label, 
		context:component-scan has an attribute annotation-config that can have true or false value. 
		If we are using context:component-scan tag with annotation-config as true, then we need not to create bean 
		for RequiredAnnotationBeanPostProcessor. The default value of annotation-config attribute is true. 
		
			<context:component-scan base-package="com.concretepage" annotation-config="true"/>
		

NOTE: a large number of constructor arguments is a bad code smell, implying that the class likely 
has too many responsibilities and should be refactored to better address proper separation of concerns.

- Setter injection should primarily only be used for optional dependencies that can be assigned reasonable 
default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. 
One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or 
re-injection later. Management through JMX MBeans is therefore a compelling use case for setter injection.

More Info: Refer: https://www.concretepage.com/spring/spring-required-annotation-example-using-xml-and-javaconfig-with-requiredannotationbeanpostprocessor
==================================================================================

Dependency resolution process
-----------------------------

	Circular dependencies
	---------------------
	If you use predominantly constructor injection, it is possible to create an unresolvable circular dependency scenario.

	For example: Class A requires an instance of class B through constructor injection, and class B requires an instance of 
	class A through constructor injection. If you configure beans for classes A and B to be injected into each other, 
	the Spring IoC container detects this circular reference at runtime, and throws a BeanCurrentlyInCreationException.
	
	One possible solution is to edit the source code of some classes to be configured by setters rather than constructors. 
	Alternatively, avoid constructor injection and use setter injection only. In other words, although it is not recommended, 
	you can configure circular dependencies with setter injection.
	
	Unlike the typical case (with no circular dependencies), a circular dependency between bean A and bean B forces one 
	of the beans to be injected into the other prior to being fully initialized itself (a classic chicken/egg scenario).
	
==================================================================================

Dependencies and configuration in detail
----------------------------------------
- Spring’s conversion service is used to convert these values from a String to the actual type of the property or argument.

	Straight values (primitives, Strings, and so on)
	------------------------------------------------
		- The idref element
			<bean id="theTargetBean" class="..."/>

			<bean id="theClientBean" class="...">
			    <property name="targetName">
			        <idref bean="theTargetBean"/>
			    </property>
			</bean>
		
	References to other beans (collaborators)
	-----------------------------------------
	Specifying the target bean through the parent attribute creates a reference to a bean that is in a parent container of 
	the current container. The value of the parent attribute may be the same as either the id attribute of the target bean, 
	or one of the values in the name attribute of the target bean, and the target bean must be in a parent container of the 
	current one. You use this bean reference variant mainly when you have a hierarchy of containers and you want to wrap an 
	existing bean in a parent container with a proxy that will have the same name as the parent bean.
	
	<!-- in the parent context -->
	<bean id="accountService" class="com.foo.SimpleAccountService">
    	<!-- insert dependencies as required as here -->
	</bean>
	
	<!-- in the child (descendant) context -->
	<bean id="accountService" <!-- bean name is the same as the parent bean -->
	    class="org.springframework.aop.framework.ProxyFactoryBean">
	    <property name="target">
	        <ref parent="accountService"/> <!-- notice how we refer to the parent bean -->
	    </property>
	    <!-- insert other configuration and dependencies as required here -->
	</bean>
	
	Inner beans
	-----------
	A <bean/> element inside the <property/> or <constructor-arg/> elements defines a so-called inner bean.
	
	An inner bean definition does not require a defined id or name; if specified, the container does not use such a 
	value as an identifier. The container also ignores the scope flag on creation: Inner beans are always anonymous and 
	they are always created with the outer bean. It is not possible to inject inner beans into collaborating beans other 
	than into the enclosing bean or to access them independently.
	
	Collections
	-----------
	In the <list/>, <set/>, <map/>, and <props/> elements, you set the properties and arguments of the Java Collection 
	types List, Set, Map, and Properties, respectively.
	
	The value of a map key or value, or a set value, can also again be any of the following elements:
	bean | ref | idref | list | set | map | props | value | null\
	
		Collection merging
		------------------
		The Spring container also supports the merging of collections. An application developer can define a parent-style 
		<list/>, <map/>, <set/> or <props/> element, and have child-style <list/>, <map/>, <set/> or <props/> elements 
		inherit and override values from the parent collection. That is, the child collection’s values are the result of 
		merging the elements of the parent and child collections, with the child’s collection elements overriding values 
		specified in the parent collection.
		
		This merging behavior applies similarly to the <list/>, <map/>, and <set/> collection types. In the specific case 
		of the <list/> element, the semantics associated with the List collection type, that is, the notion of an ordered 
		collection of values, is maintained; the parent’s values precede all of the child list’s values. In the case of 
		the Map, Set, and Properties collection types, no ordering exists. Hence no ordering semantics are in effect for 
		the collection types that underlie the associated Map, Set, and Properties implementation types that the container 
		uses internally.
		
		Limitations of collection merging
		---------------------------------
		You cannot merge different collection types (such as a Map and a List), and if you do attempt to do so an 
		appropriate Exception is thrown. The merge attribute must be specified on the lower, inherited, child definition; 
		specifying the merge attribute on a parent collection definition is redundant and will not result in the desired 
		merging.
		
		Strongly-typed collection
		-------------------------
		-With the introduction of generic types in Java 5, you can use strongly typed collections. 
		-That is, it is possible to declare a Collection type such that it can only contain String elements (for example). 
		-If you are using Spring to dependency-inject a strongly-typed Collection into a bean, you can take advantage of 
		 Spring’s type-conversion support such that the elements of your strongly-typed Collection instances are converted 
		 to the appropriate type prior to being added to the Collection.
	
	Null and empty string values
	----------------------------
	Spring treats empty arguments for properties and the like as empty Strings. The following XML-based configuration 
	metadata snippet sets the email property to the empty String value ("").
	
		<bean class="ExampleBean">
		    <property name="email" value=""/>
		</bean>
	
		The preceding example is equivalent to the following Java code:
	
			exampleBean.setEmail("");
		
		The <null/> element handles null values. For example:
		
			<bean class="ExampleBean">
			    <property name="email">
			        <null/>
			    </property>
			</bean>
		
		The above configuration is equivalent to the following Java code:
		
		exampleBean.setEmail(null);
		
	Compound property names
	-----------------------
	You can use compound or nested property names when you set bean properties, as long as all components of the path 
	except the final property name are not null. Consider the following bean definition.
	
		<bean id="foo" class="foo.Bar">
		    <property name="fred.bob.sammy" value="123" />
		</bean>
		
	The foo bean has a fred property, which has a bob property, which has a sammy property, and that final sammy property 
	is being set to the value 123. In order for this to work, the fred property of foo, and the bob property of fred 
	must not be null after the bean is constructed, or a NullPointerException is thrown.		
	
==================================================================================

Using depends-on
----------------
If a bean is a dependency of another that usually means that one bean is set as a property of another. 
Typically you accomplish this with the <ref/> element in XML-based configuration metadata. However, sometimes 
dependencies between beans are less direct; for example, a static initializer in a class needs to be triggered, 
such as database driver registration. The depends-on attribute can explicitly force one or more beans to be initialized 
before the bean using this element is initialized.

	<bean id="beanOne" class="ExampleBean" depends-on="manager"/>
	<bean id="manager" class="ManagerBean" />
	
To express a dependency on multiple beans, supply a list of bean names as the value of the depends-on attribute, 
with commas, whitespace and semicolons, used as valid delimiters:

	<bean id="beanOne" class="ExampleBean" depends-on="manager,accountDao">
	    <property name="manager" ref="manager" />
	</bean>

	<bean id="manager" class="ManagerBean" />
	<bean id="accountDao" class="x.y.jdbc.JdbcAccountDao" />
	
INFO:
	The depends-on attribute in the bean definition can specify both an initialization time dependency and, 
	in the case of singleton beans only, a corresponding destroy time dependency. Dependent beans that define a 
	depends-on relationship with a given bean are destroyed first, prior to the given bean itself being destroyed. 
	Thus depends-on can also control shutdown order.
	
==================================================================================

Lazy-initialized beans
----------------------
By default, ApplicationContext implementations eagerly create and configure all singleton beans as part of the 
initialization process. Generally, this pre-instantiation is desirable, because errors in the configuration or surrounding 
environment are discovered immediately, as opposed to hours or even days later. When this behavior is not desirable, 
you can prevent pre-instantiation of a singleton bean by marking the bean definition as lazy-initialized. 
A lazy-initialized bean tells the IoC container to create a bean instance when it is first requested, rather 
than at startup.

However, when a lazy-initialized bean is a dependency of a singleton bean that is not lazy-initialized, 
the ApplicationContext creates the lazy-initialized bean at startup, because it must satisfy the singleton’s dependencies. 
The lazy-initialized bean is injected into a singleton bean elsewhere that is not lazy-initialized.

You can also control lazy-initialization at the container level by using the default-lazy-init attribute on the <beans/> 
element; 

==================================================================================

Autowiring collaborators
------------------------
The Spring container can autowire relationships between collaborating beans. You can allow Spring to resolve collaborators 
(other beans) automatically for your bean by inspecting the contents of the ApplicationContext. Autowiring has the 
following advantages:

	- Autowiring can significantly reduce the need to specify properties or constructor arguments.
	- Autowiring can update a configuration as your objects evolve. For example, if you need to add a dependency to a class, 
	that dependency can be satisfied automatically without you needing to modify the configuration. Thus autowiring can be 
	especially useful during development, without negating the option of switching to explicit wiring when the code base 
	becomes more stable.

When using XML-based configuration metadata [2], you specify autowire mode for a bean definition with the autowire 
attribute of the <bean/> element

The autowiring functionality has four modes.

	- no : (Default) No autowiring. Bean references must be defined via a ref element. Changing the default setting is 
			not recommended for larger deployments, because specifying collaborators explicitly gives greater control 
			and clarity. To some extent, it documents the structure of a system.
			
	- byName : Autowiring by property name. Spring looks for a bean with the same name as the property that needs to 
				be autowired. For example, if a bean definition is set to autowire by name, and it contains a master 
				property (that is, it has a setMaster(..) method), Spring looks for a bean definition named master, 
				and uses it to set the property.
				
	- byType : Allows a property to be autowired if exactly one bean of the property type exists in the container. 
				If more than one exists, a fatal exception is thrown, which indicates that you may not use byType 
				autowiring for that bean. If there are no matching beans, nothing happens; the property is not set.
				
	- constructor : Analogous to byType, but applies to constructor arguments. If there is not exactly one bean of the 
					constructor argument type in the container, a fatal error is raised.
					
	Limitations and disadvantages of autowiring
	-------------------------------------------
	Autowiring works best when it is used consistently across a project. If autowiring is not used in general, 
	it might be confusing to developers to use it to wire only one or two bean definitions.
	
==================================================================================

Method injection
----------------
	- In most application scenarios, most beans in the container are singletons. 
	
	- When a singleton bean needs to collaborate with another singleton bean, or 
		a non-singleton bean needs to collaborate with another non-singleton bean, 
		you typically handle the dependency by defining one bean as a property of the other.
		
	- A problem arises when the bean lifecycles are different. Suppose singleton bean A needs to 
		use non-singleton (prototype) bean B, perhaps on each method invocation on A. The container only creates 
		the singleton bean A once, and thus only gets one opportunity to set the properties. The container cannot 
		provide bean A with a new instance of bean B every time one is needed.
		
	- A solution is to forego some inversion of control. You can make bean A aware of the container by implementing 
		the ApplicationContextAware interface, and by making a getBean("B") call to the container ask for (a typically new) 
		bean B instance every time bean A needs it. 	
	
	Lookup method injection
	-----------------------
	
	
	Arbitrary method replacement
	----------------------------
	A less useful form of method injection than lookup method injection is the ability to replace arbitrary methods 
	in a managed bean with another method implementation. Users may safely skip the rest of this section until the 
	functionality is actually needed.
	
	With XML-based configuration metadata, you can use the replaced-method element to replace an existing method 
	implementation with another, for a deployed bean. Consider the following class, with a method computeValue, 
	which we want to override:
	
	A class implementing the org.springframework.beans.factory.support.MethodReplacer interface provides the new 
	method definition.
	