Bean overview
-------------
A Spring IoC container manages one or more beans. These beans are created with the configuration metadata that you supply to the container, for example, in the form of XML <bean/> definitions.

Within the container itself, these bean definitions are represented as BeanDefinition objects, which contain (among other information) the following metadata:

	==>A package-qualified class name: typically the actual implementation class of the bean being defined.

	==>Bean behavioral configuration elements, which state how the bean should behave in the container (scope, lifecycle callbacks, and so forth).

	==>References to other beans that are needed for the bean to do its work; these references are also called collaborators or dependencies.

	==>Other configuration settings to set in the newly created object, for example, the number of connections to use in a bean that manages a connection pool, or the size limit of the pool.

This metadata translates to a set of properties that make up each bean definition.

Table 1. The bean definition
Property					Explained in…​
class						Instantiating beans

name						Naming beans

scope						Bean scopes

constructor arguments		Dependency Injection

properties					Dependency Injection

autowiring mode				Autowiring collaborators

lazy-initialization mode	Lazy-initialized beans

initialization method		Initialization callbacks

destruction method			Destruction callbacks

========================================================
Instantiating beans
-------------------

Inner class names
If you want to configure a bean definition for a static nested class, you have to use the binary name of the nested class.

For example, if you have a class called Foo in the com.example package, and this Foo class has a static nested class called Bar, the value of the 'class' attribute on a bean definition would be…​

com.example.Foo$Bar

Notice the use of the $ character in the name to separate the nested class name from the outer class name.

	
	package com.x.y;
	public class A {
    	public static class B {
    	...
    	}
	}
	
	<bean id="myBean" class="com.x.y.A$B"/>
	
========================================================

Instantiation with a static factory method
------------------------------------------
When defining a bean that you create with a static factory method, you use the class attribute to specify the class containing the static factory method and an attribute named factory-method to specify the name of the factory method itself. You should be able to call this method (with optional arguments as described later) and return a live object, which subsequently is treated as if it had been created through a constructor. One use for such a bean definition is to call static factories in legacy code.

The following bean definition specifies that the bean will be created by calling a factory-method. The definition does not specify the type (class) of the returned object, only the class containing the factory method. In this example, the createInstance() method must be a static method.

<bean id="clientService"
    class="examples.ClientService"
    factory-method="createInstance"/>
    
public class ClientService {
    private static ClientService clientService = new ClientService();
    private ClientService() {}

    public static ClientService createInstance() {
        return clientService;
    }
}

========================================================

Instantiation using an instance factory method
----------------------------------------------
Similar to instantiation through a static factory method, instantiation with an instance factory method invokes a non-static method of an existing bean from the container to create a new bean. To use this mechanism, leave the class attribute empty, and in the factory-bean attribute, specify the name of a bean in the current (or parent/ancestor) container that contains the instance method that is to be invoked to create the object. Set the name of the factory method itself with the factory-method attribute.

	<!-- the factory bean, which contains a method called createInstance() -->
	<bean id="serviceLocator" class="examples.DefaultServiceLocator">
	    <!-- inject any dependencies required by this locator bean -->
	</bean>
	
	<!-- the bean to be created via the factory bean -->
	<bean id="clientService"
	    factory-bean="serviceLocator"
	    factory-method="createClientServiceInstance"/>
	    
	public class DefaultServiceLocator {

	    private static ClientService clientService = new ClientServiceImpl();
	
	    public ClientService createClientServiceInstance() {
	        return clientService;
	    }
	}
	
	One factory class can also hold more than one factory method as shown here:
	
	<bean id="serviceLocator" class="examples.DefaultServiceLocator">
	    <!-- inject any dependencies required by this locator bean -->
	</bean>
	
	<bean id="clientService"
	    factory-bean="serviceLocator"
	    factory-method="createClientServiceInstance"/>
	
	<bean id="accountService"
	    factory-bean="serviceLocator"
	    factory-method="createAccountServiceInstance"/>
	    
	public class DefaultServiceLocator {

	    private static ClientService clientService = new ClientServiceImpl();
	
	    private static AccountService accountService = new AccountServiceImpl();
	
	    public ClientService createClientServiceInstance() {
	        return clientService;
	    }
	
	    public AccountService createAccountServiceInstance() {
	        return accountService;
	    }
	}
	
