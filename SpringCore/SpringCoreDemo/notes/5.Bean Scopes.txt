Bean Scopes
-----------
Spring supports different scopes for differnt purposes.

	1. singleton - (default) Scopes a single bean definition to a single object instance per Spring IoC container.
	
			only one instance is ever created...and this same shared instance is injected into each collaborating object (caller).
			
			<bean id="accountService" class="com.foo.DefaultAccountService"/>

			<!-- the following is equivalent, though redundant (singleton scope is the default) -->
			<bean id="accountService" class="com.foo.DefaultAccountService" scope="singleton"/>
	
	2. prototype - Scopes a single bean definition to any number of object instances.
	
			a brand new bean instance is created...each and every time the prototype is referenced by collaborating beans.
			
			<bean id="accountService" class="com.foo.DefaultAccountService" scope="prototype"/>
			
		Notes:
			- Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, 
			  configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of 
			  that prototype instance.
			  
			- The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are 
			  holding.
			  
			- To get the Spring container to release resources held by prototype-scoped beans, try using a custom bean post-processor, 
			  which holds a reference to beans that need to be cleaned up.
	
	3. request - Scopes a single bean definition to the lifecycle of a single HTTP request; that is, each HTTP request 
				 has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.
	 
	4. session - Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware 
				 Spring ApplicationContext.
	
	5. application - Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware 
					 Spring ApplicationContext.
	
	6. websocket - Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware 
				   Spring ApplicationContext.

	7. thread - Spring 3.0 and later, a thread scope is available, but is not registered by default.
	

Custom scopes
-------------
To integrate your custom scope(s) into the Spring container, you need to implement the org.springframework.beans.factory.config.Scope interface.