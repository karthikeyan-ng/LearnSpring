							Validation, Data Binding, and Type Conversion
							---------------------------------------------

		Resolving codes to error messages
		---------------------------------

We’ve talked about databinding and validation. Outputting messages corresponding to validation errors is the last thing we need to discuss.

In the previous two examples,

	- com.techstack.spring.validator.complex
	- com.techstack.spring.validator.simple
	
we’ve shown above, we rejected the name and the age field (from simple package).

	- If we’re going to output the error messages by using a MessageSource, we will do so using the error code we’ve given when rejecting 
	the field ('name' and 'age' in this case).
	
	- When you call (either directly, or indirectly, using for example the ValidationUtils class) rejectValue or one of the other reject 
	methods from the Errors interface, the underlying implementation will not only register the code you’ve passed in, but also a number of 
	additional error codes.
	
	Example:
	--------
	Field error in object 'person' on field 'firstname': rejected value [null]; codes [name.empty.person.firstname,name.empty.firstname,name.empty.java.lang.String,name.empty]; arguments []; default message [null]
	Field error in object 'person' on field 'age': rejected value [-2]; codes [negativevalue.person.age,negativevalue.age,negativevalue.int,negativevalue]; arguments []; default message [null]
 
 	Here in each error line 'name.empty' and 'negativevalue' message codes are defined in our code. On the other hand Spring generates additional message
 	code better access. 
 	
 	- What error codes it registers is determined by the MessageCodesResolver that is used.
 	
 	- By default, the DefaultMessageCodesResolver is used, which for example not only registers a message with the code you gave, but also messages 
 	that include the field name you passed to the reject method.
 	
 	Additioanl error codes generated by Spring
 	------------------------------------------
 	- So in case you reject a field using rejectValue("age", "too.darn.old"), apart from the 'too.darn.old' code, Spring will also register 'too.darn.old.age' and 
 	'too.darn.old.age.int' (so the first will include the field name and the second will include the type of the field); this is done as a convenience to aid 
 	developers in targeting error messages and suchlike.
 	
 	More information on the MessageCodesResolver and the default strategy can be found online in the javadocs of MessageCodesResolver 
 	and DefaultMessageCodesResolver, respectively.
 	
 	
 	
 	