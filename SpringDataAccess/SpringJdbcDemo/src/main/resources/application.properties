#---------------(2) Using Spring Boot properties -------------------------------
spring.datasource.url=jdbc:mysql://db4free.net:3306/testdb_ng?useSSL=false
spring.datasource.username=system_ng
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#This property would create (drop and recreate) database on each application startup
#This should not be configured for PROD 
spring.datasource.initialization-mode=always

### ============================== JDBC Batch Operations ===================
#In such a scenario with automatic setting of values on an underlying PreparedStatement, 
#the corresponding JDBC type for each value needs to be derived from the given Java type. While this usually works well, 
#there is a potential for issues, e.g. with Map-contained null values: Spring will by default call ParameterMetaData.getParameterType 
#in such a case which may be expensive with your JDBC driver. Please make sure to use a recent driver version, and 
#consider setting the "spring.jdbc.getParameterType.ignore" property to "true" (as a JVM system property or in a spring.properties 
#file in the root of your classpath) if you encounter a performance issue, e.g. as reported on Oracle 12c (SPR-16139).
#spring.jdbc.getParameterType.ignore = false

#Alternatively, simply consider specifying the corresponding JDBC types explicitly: either via a 'BatchPreparedStatementSetter' 
#as shown above, or via an explicit type array given to a 'List<Object[]>' based call, or via 'registerSqlType' calls on a 
#custom 'MapSqlParameterSource' instance, or via a 'BeanPropertySqlParameterSource' which derives the SQL type from the Java-declared 
#property type even for a null value.
### ============================== END JDBC Batch Operations ===================

#Use this site to see data https://www.db4free.net/phpMyAdmin/index.php
#---------------------------------------------------------------------------
